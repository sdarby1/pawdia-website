datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/* ========== USER & AUTH ========== */

model User {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String?      @unique
  image      String?
  password   String?
  role       Role         @default(USER)

  favorites  UserFavorite[]
  accounts   Account[]
  chats      Chat[]
  blogPosts  BlogPost[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  token_type        String?
  scope             String?
  id_token          String?
  expires_at        Int?

  user              User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

/* ========== SHELTER & OPENING HOURS ========== */

model Shelter {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  password       String

  contactPerson  String?
  street         String?
  houseNumber    String?
  postalCode     String?
  city           String?
  phoneNumber    String?

  latitude       Float?
  longitude      Float?
  googleMapsLink String?
  website        String?

  instagram      String?
  facebook       String?
  tiktok         String?
  linkedIn       String?

  profileImage   String?
  isVerified     Boolean  @default(false)
  createdAt      DateTime @default(now())

  animals        Animal[]
  chats          Chat[]
  openingHours   OpeningHour[]
}

model OpeningHour {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  day       String
  fromTime  String
  toTime    String

  shelter   Shelter  @relation(fields: [shelterId], references: [id])
  shelterId String   @db.ObjectId
}

/* ========== ANIMALS & FAVORITES (explizit) ========== */

model Animal {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  species           String
  breed             String
  gender            String
  birthDate         DateTime
  age               Int
  size              String
  isFamilyFriendly  Boolean
  isForExperienced  Boolean
  isEmergency       Boolean
  isNeutered        Boolean   @default(false)
  isForSeniors      Boolean   @default(false)
  isForBeginners    Boolean   @default(false)
  goodWithCats      Boolean   @default(false)
  goodWithDogs      Boolean   @default(false)
  goodWithChildren  Boolean   @default(false)
  adoptionFee       Float?
  description       String
  coverImage        String
  images            Json?
  videos            Json?

  shelter           Shelter   @relation(fields: [shelterId], references: [id])
  shelterId         String    @db.ObjectId

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  favoredBy         UserFavorite[]
  chats             Chat[]
}

model UserFavorite {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  animalId String @db.ObjectId

  user     User   @relation(fields: [userId], references: [id])
  animal   Animal @relation(fields: [animalId], references: [id])

  @@unique([userId, animalId])
  @@index([animalId])
  @@index([userId])
}

/* ========== CHATS & MESSAGES ========== */

model Chat {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  shelterId String     @db.ObjectId
  animalId  String?    @db.ObjectId
  status    ChatStatus @default(OFFEN)
  messages  Message[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  shelter   Shelter    @relation(fields: [shelterId], references: [id])
  animal    Animal?    @relation(fields: [animalId], references: [id])

  @@index([userId])
  @@index([shelterId])
  @@index([animalId])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  senderId   String
  isFromUser Boolean
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())

  chatId     String   @db.ObjectId
  chat       Chat     @relation(fields: [chatId], references: [id])

  @@index([chatId])
}

/* ========== BLOG ========== */

model BlogPost {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  coverImage  String?
  subheadline String?
  categories  BlogPostCategory[]
  blocks      BlogBlock[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  authorId    String?      @db.ObjectId
  author      User?        @relation(fields: [authorId], references: [id])
}

model BlogPostCategory {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  category BlogCategory

  postId   String     @db.ObjectId
  post     BlogPost   @relation(fields: [postId], references: [id])

  @@index([postId])
}

model BlogBlock {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       BlockType
  content    String
  order      Int

  blogPostId String   @db.ObjectId
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])

  @@index([blogPostId])
}

/* ========== SHELTER REQUESTS (unabh√§ngig) ========== */

model ShelterRequest {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  website       String?
  contactPerson String?
  street        String?
  houseNumber   String?
  postalCode    String?
  city          String?
  message       String?
  documents     Json?
  createdAt     DateTime @default(now())
}

/* ========== ENUMS ========== */

enum ChatStatus {
  OFFEN
  ERLEDIGT
}

enum Role {
  USER
  ADMIN
}

enum AnimalSize {
  KLEIN
  MITTEL
  GROSS
  EGAL
}

enum AnimalGender {
  MAENNLICH
  WEIBLICH
  EGAL
}

enum AnimalType {
  HUND
  KATZE
  KLEINTIER
  VOGEL
  EGAL
}

enum BlockType {
  HEADING
  PARAGRAPH
  IMAGE
}

enum BlogCategory {
  TIERSCHUTZ
  ERNAEHRUNG
  ADOPTION
  HUNDE
  KATZEN
  VERMISST
  AKTUELLES
}
